(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{587:function(a,s,e){"use strict";e.r(s);var n=e(10),t=Object(n.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"for-each-剖析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-each-剖析"}},[a._v("#")]),a._v(" for each 剖析")]),a._v(" "),e("p",[a._v("迭代是编程的基础。您经常会遇到需要进行逐项遍历的内容，比如 "),e("code",[a._v("List")]),a._v("、"),e("code",[a._v("File")]),a._v(" 和 JDBC "),e("code",[a._v("ResultSet")]),a._v("。Java 语言几乎总是提供了某种方法帮助您逐项遍历所需的内容，但令人沮丧的是，它并没有给出一种标准方法。Groovy 的迭代方法非常实用，在这一点上，Groovy 编程与 Java 编程截然不同。通过一些代码示例，本文将介绍 Groovy 的万能的 "),e("code",[a._v("each()")]),a._v(" 方法，从而将 Java 语言的那些迭代怪癖抛在脑后。")]),a._v(" "),e("h2",{attrs:{id:"java-迭代策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-迭代策略"}},[a._v("#")]),a._v(" Java 迭代策略")]),a._v(" "),e("p",[a._v("假设您有一个 Java 编程语言的 "),e("code",[a._v("java.util.List")]),a._v("。清单 1 展示了在 Java 语言中如何使用编程实现迭代：")]),a._v(" "),e("h3",{attrs:{id:"清单-1-java-列表迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-1-java-列表迭代"}},[a._v("#")]),a._v(" 清单 1. Java 列表迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('import java.util.*;\n \npublic class ListTest{\n  public static void main(String[] args){\n    List<String> list = new ArrayList<String>();\n    list.add("Java");\n    list.add("Groovy");\n    list.add("JavaScript");\n     \n    for(Iterator<String> i = list.iterator(); i.hasNext();){\n      String language = i.next();\n      System.out.println("I know " + language);\n    }\n  }  \n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("p",[a._v("由于提供了大部分集合类都可以共享的 "),e("code",[a._v("java.lang.Iterable")]),a._v(" 接口，您可以使用相同的方法遍历 "),e("code",[a._v("java.util.Set")]),a._v(" 或 "),e("code",[a._v("java.util.Queue")]),a._v("。")]),a._v(" "),e("h3",{attrs:{id:"关于本系列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于本系列"}},[a._v("#")]),a._v(" 关于本系列")]),a._v(" "),e("p",[a._v("Groovy 是一款运行在 Java 平台之上的现代编程语言。它能够与现有 Java 代码无缝集成，同时引入了闭包和元编程等出色的新特性。简而言之，Groovy 类似于 21 世纪的 Java 语言。")]),a._v(" "),e("p",[a._v("如果要将新工具集成到开发工具箱中，最关键的是理解什么时候需要使用它以及什么时候不适合使用它。Groovy 可以变得非常强大，但前提是它被适当地应用到合适的场景中。因此，"),e("a",{attrs:{href:"http://www.ibm.com/developerworks/cn/java/j-pg/",target:"_blank",rel:"noopener noreferrer"}},[e("em",[a._v("实战 Groovy")]),e("OutboundLink")],1),a._v(" 系列旨在展示 Groovy 的实际使用，以及何时和如何成功应用它。")]),a._v(" "),e("p",[a._v("现在，假设该语言存储在 "),e("code",[a._v("java.util.Map")]),a._v(" 中。在编译时，尝试对 "),e("code",[a._v("Map")]),a._v(" 获取 "),e("code",[a._v("Iterator")]),a._v(" 会导致失败 —"),e("code",[a._v("Map")]),a._v(" 并没有实现 "),e("code",[a._v("Iterable")]),a._v(" 接口。幸运的是，可以调用 "),e("code",[a._v("map.keySet()")]),a._v(" 返回一个 "),e("code",[a._v("Set")]),a._v("，然后就可以继续处理。这些小差异可能会影响您的速度，但不会妨碍您的前进。需要注意的是，"),e("code",[a._v("List")]),a._v("、"),e("code",[a._v("Set")]),a._v(" 和 "),e("code",[a._v("Queue")]),a._v(" 实现了 "),e("code",[a._v("Iterable")]),a._v("，但是 "),e("code",[a._v("Map")]),a._v(" 没有 — 即使它们位于相同的 "),e("code",[a._v("java.util")]),a._v("包中。")]),a._v(" "),e("p",[a._v("现在假设该语言存在于 "),e("code",[a._v("String")]),a._v(" 数组中。数组是一种数据结构，而不是类。不能对 "),e("code",[a._v("String")]),a._v(" 数组调用 "),e("code",[a._v(".iterator()")]),a._v("，因此必须使用稍微不同的迭代策略。您再一次受到阻碍，但可以使用如清单 2 所示的方法解决问题：")]),a._v(" "),e("h3",{attrs:{id:"清单-2-java-数组迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-2-java-数组迭代"}},[a._v("#")]),a._v(" 清单 2. Java 数组迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public class ArrayTest{\n  public static void main(String[] args){\n    String[] list = {"Java", "Groovy", "JavaScript"};\n    \n    for(int i = 0; i < list.length; i++){\n      String language = list[i];\n      System.out.println("I know " + language);\n    }\n  }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])]),e("p",[a._v("但是等一下 — 使用 Java 5 引入的 for-each 语法怎么样（参见 "),e("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-pg04149.html#artrelatedtopics",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考资料"),e("OutboundLink")],1),a._v("）？它可以处理任何实现 "),e("code",[a._v("Iterable")]),a._v(" 的类和数组，如清单 3 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-3-java-语言的-for-each-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-3-java-语言的-for-each-迭代"}},[a._v("#")]),a._v(" 清单 3. Java 语言的 for-each 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('import java.util.*;\n \npublic class MixedTest{\n  public static void main(String[] args){\n    List<String> list = new ArrayList<String>();\n    list.add("Java");\n    list.add("Groovy");\n    list.add("JavaScript");\n     \n    for(String language: list){\n      System.out.println("I know " + language);      \n    }\n \n    String[] list2 = {"Java", "Groovy", "JavaScript"};\n    for(String language: list2){\n      System.out.println("I know " + language);      \n    }\n  }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br")])]),e("p",[a._v("因此，您可以使用相同的方法遍历数组和集合（"),e("code",[a._v("Map")]),a._v(" 除外）。但是如果语言存储在 "),e("code",[a._v("java.io.File")]),a._v("，那该怎么办？如果存储在 JDBC "),e("code",[a._v("ResultSet")]),a._v("，或者存储在 XML 文档、"),e("code",[a._v("java.util.StringTokenizer")]),a._v(" 中呢？面对每一种情况，必须使用一种稍有不同的迭代策略。这样做并不是有什么特殊目的 — 而是因为不同的 API 是由不同的开发人员在不同的时期开发的 — 但事实是，您必须了解 6 个 Java 迭代策略，特别是使用这些策略的特殊情况。")]),a._v(" "),e("p",[a._v("Eric S. Raymond 在他的 "),e("em",[a._v("The Art of Unix Programming")]),a._v("（参见 "),e("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-pg04149.html#artrelatedtopics",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考资料"),e("OutboundLink")],1),a._v("）一书中解释了 “最少意外原则”。他写道，“要设计可用的接口，最好不要设计全新的接口模型。新鲜的东西总是难以入门；会为用户带来学习的负担，因此应当尽量减少新内容。”Groovy 对迭代的态度正是采纳了 Raymond 的观点。在 Groovy 中遍历几乎任何结构时，您只需要使用 "),e("code",[a._v("each()")]),a._v(" 这一种方法。")]),a._v(" "),e("h2",{attrs:{id:"groovy-中的列表迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#groovy-中的列表迭代"}},[a._v("#")]),a._v(" Groovy 中的列表迭代")]),a._v(" "),e("p",[a._v("首先，我将 "),e("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-pg04149.html#listing3",target:"_blank",rel:"noopener noreferrer"}},[a._v("清单 3"),e("OutboundLink")],1),a._v(" 中的 "),e("code",[a._v("List")]),a._v(" 重构为 Groovy。在这里，只需要直接对列表调用 "),e("code",[a._v("each()")]),a._v(" 方法并传递一个闭包，而不是将 "),e("code",[a._v("List")]),a._v("转换成 "),e("code",[a._v("for")]),a._v(" 循环（顺便提一句，这样做并不是特别具有面向对象的特征，不是吗）。")]),a._v(" "),e("p",[a._v("创建一个名为 listTest.groovy 的文件并添加清单 4 中的代码：")]),a._v(" "),e("h3",{attrs:{id:"清单-4-groovy-列表迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-4-groovy-列表迭代"}},[a._v("#")]),a._v(" 清单 4. Groovy 列表迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def list = ["Java", "Groovy", "JavaScript"]\nlist.each{language->\n  println language\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("清单 4 中的第一行是 Groovy 用于构建 "),e("code",[a._v("java.util.ArrayList")]),a._v(" 的便捷语法。可以将 "),e("code",[a._v("println list.class")]),a._v(" 添加到此脚本来验证这一点。接下来，只需对列表调用 "),e("code",[a._v("each()")]),a._v("，并在闭包体内输出 "),e("code",[a._v("language")]),a._v(" 变量。在闭包的开始处使用 "),e("code",[a._v("language->")]),a._v(" 语句命名 "),e("code",[a._v("language")]),a._v(" 变量。如果没有提供变量名，Groovy 提供了一个默认名称 "),e("code",[a._v("it")]),a._v("。在命令行提示符中输入 "),e("code",[a._v("groovy listTest")]),a._v(" 运行 listTest.groovy。")]),a._v(" "),e("p",[a._v("清单 5 是经过简化的 "),e("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-pg04149.html#listing4",target:"_blank",rel:"noopener noreferrer"}},[a._v("清单 4"),e("OutboundLink")],1),a._v(" 代码版本：")]),a._v(" "),e("h3",{attrs:{id:"清单-5-使用-groovy-的-it-变量的迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-5-使用-groovy-的-it-变量的迭代"}},[a._v("#")]),a._v(" 清单 5. 使用 Groovy 的 "),e("code",[a._v("it")]),a._v(" 变量的迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// shorter, using the default it variable\ndef list = ["Java", "Groovy", "JavaScript"]\nlist.each{ println it }\n \n// shorter still, using an anonymous list\n["Java", "Groovy", "JavaScript"].each{ println it }\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("Groovy 允许您对数组和 "),e("code",[a._v("List")]),a._v(" 交替使用 "),e("code",[a._v("each()")]),a._v(" 方法。为了将 "),e("code",[a._v("ArrayList")]),a._v(" 改为 "),e("code",[a._v("String")]),a._v(" 数组，必须将 "),e("code",[a._v("as String[]")]),a._v(" 添加到行末，如清单 6 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-6-groovy-数组迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-6-groovy-数组迭代"}},[a._v("#")]),a._v(" 清单 6. Groovy 数组迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def list = ["Java", "Groovy", "JavaScript"] as String[]\nlist.each{println it}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("在 Groovy 中普遍使用 "),e("code",[a._v("each()")]),a._v(" 方法，并且 getter 语法非常便捷（"),e("code",[a._v("getClass()")]),a._v(" 和 "),e("code",[a._v("class")]),a._v(" 是相同的调用），这使您能够编写既简洁又富有表达性的代码。例如，假设您希望利用反射显示给定类的所有公共方法。清单 7 展示了这个例子：")]),a._v(" "),e("h3",{attrs:{id:"清单-7-groovy-反射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-7-groovy-反射"}},[a._v("#")]),a._v(" 清单 7. Groovy 反射")]),a._v(" "),e("div",{staticClass:"language-{groovy} line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def s = "Hello World"\nprintln s\nprintln s.class\ns.class.methods.each{println it}\n \n//output:\n$ groovy reflectionTest.groovy \nHello World\nclass java.lang.String\npublic int java.lang.String.hashCode()\npublic volatile int java.lang.String.compareTo(java.lang.Object)\npublic int java.lang.String.compareTo(java.lang.String)\npublic boolean java.lang.String.equals(java.lang.Object)\n...\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br")])]),e("p",[a._v("脚本的最后一行调用 "),e("code",[a._v("getClass()")]),a._v(" 方法。"),e("code",[a._v("java.lang.Class")]),a._v(" 提供了一个 "),e("code",[a._v("getMethods()")]),a._v(" 方法，后者返回一个数组。通过将这些操作串连起来并对 "),e("code",[a._v("Method")]),a._v(" 的结果数组调用 "),e("code",[a._v("each()")]),a._v("，您只使用了一行代码就完成了大量工作。")]),a._v(" "),e("p",[a._v("但是，与 Java for-each 语句不同的是，万能的 "),e("code",[a._v("each()")]),a._v(" 方法并不仅限于 "),e("code",[a._v("List")]),a._v(" 和数组。在 Java 语言中，故事到此结束。然而，在 Groovy 中，故事才刚刚开始。")]),a._v(" "),e("h2",{attrs:{id:"map-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map-迭代"}},[a._v("#")]),a._v(" Map 迭代")]),a._v(" "),e("p",[a._v("从前文可以看到，在 Java 语言中，无法直接迭代 "),e("code",[a._v("Map")]),a._v("。在 Groovy 中，这完全不是问题，如清单 8 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-8-groovy-map-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-8-groovy-map-迭代"}},[a._v("#")]),a._v(" 清单 8. Groovy map 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def map = ["Java":"server", "Groovy":"server", "JavaScript":"web"]\nmap.each{ println it }\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("要处理名称/值对，可以使用隐式的 "),e("code",[a._v("getKey()")]),a._v(" 和 "),e("code",[a._v("getValue()")]),a._v(" 方法，或在包的开头部分显式地命名变量，如清单 9 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-9-从-map-获得键和值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-9-从-map-获得键和值"}},[a._v("#")]),a._v(" 清单 9. 从 map 获得键和值")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def map = ["Java":"server", "Groovy":"server", "JavaScript":"web"]\nmap.each{ \n  println it.key\n  println it.value \n}\n \nmap.each{k,v->\n  println k\n  println v\n}\n\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("可以看到，迭代 "),e("code",[a._v("Map")]),a._v(" 和迭代其它任何集合一样自然。")]),a._v(" "),e("p",[a._v("在继续研究下一个迭代例子前，应当了解 Groovy 中有关 "),e("code",[a._v("Map")]),a._v(" 的另一个语法。与在 Java 语言中调用 "),e("code",[a._v('map.get("Java")')]),a._v(" 不一样，可以简化对 "),e("code",[a._v("map.Java")]),a._v(" 的调用，如清单 10 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-10-获得-map-值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-10-获得-map-值"}},[a._v("#")]),a._v(" 清单 10. 获得 map 值")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def map = ["Java":"server", "Groovy":"server", "JavaScript":"web"]\n \n//identical results\nprintln map.get("Java")\nprintln map.Java\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("p",[a._v("不可否认，Groovy 针对 "),e("code",[a._v("Map")]),a._v(" 的这种便捷语法非常酷，但这也是在对 "),e("code",[a._v("Map")]),a._v(" 使用反射时引起一些常见问题的原因。对 "),e("code",[a._v("list.class")]),a._v("的调用将生成 "),e("code",[a._v("java.util.ArrayList")]),a._v("，而调用 "),e("code",[a._v("map.class")]),a._v(" 返回 "),e("code",[a._v("null")]),a._v("。这是因为获得 map 元素的便捷方法覆盖了实际的 getter 调用。"),e("code",[a._v("Map")]),a._v(" 中的元素都不具有 "),e("code",[a._v("class")]),a._v(" 键，因此调用实际会返回 "),e("code",[a._v("null")]),a._v("，如清单 11 的示例所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-11-groovy-map-和-null"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-11-groovy-map-和-null"}},[a._v("#")]),a._v(" 清单 11. Groovy map 和 "),e("code",[a._v("null")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def list = ["Java", "Groovy", "JavaScript"]\nprintln list.class\n// java.util.ArrayList\n \ndef map = ["Java":"server", "Groovy":"server", "JavaScript":"web"]\nprintln map.class\n// null\n \nmap.class = "I am a map element"\nprintln map.class\n// I am a map element\n \nprintln map.getClass()\n// class java.util.LinkedHashMap\n\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("p",[a._v("这是 Groovy 比较罕见的打破 “最少意外原则” 的情况，但是由于从 map 获取元素要比使用反射更加常见，因此我可以接受这一例外。")]),a._v(" "),e("h2",{attrs:{id:"string-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-迭代"}},[a._v("#")]),a._v(" String 迭代")]),a._v(" "),e("p",[a._v("现在您已经熟悉 "),e("code",[a._v("each()")]),a._v(" 方法了，它可以出现在所有相关的位置。假设您希望迭代一个 "),e("code",[a._v("String")]),a._v("，并且是逐一迭代字符，那么马上可以使用 "),e("code",[a._v("each()")]),a._v(" 方法。如清单 12 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-12-string-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-12-string-迭代"}},[a._v("#")]),a._v(" 清单 12. "),e("code",[a._v("String")]),a._v(" 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def name = "Jane Smith"\nname.each{letter->\n  println letter\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("这提供了所有的可能性，比如使用下划线替代所有空格，如清单 13 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-13-使用下划线替代空格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-13-使用下划线替代空格"}},[a._v("#")]),a._v(" 清单 13. 使用下划线替代空格")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def name = "Jane Smith"\nprintln "replace spaces"\nname.each{\n  if(it == " "){\n    print "_"\n  }else{\n    print it\n  }\n}\n \n// output\nJane_Smith\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("p",[a._v("当然，在替换一个单个字母时，Groovy 提供了一个更加简洁的替换方法。您可以将清单 13 中的所有代码合并为一行代码："),e("code",[a._v('"Jane Smith".replace(" ", "_")')]),a._v("。但是对于更复杂的 "),e("code",[a._v("String")]),a._v(" 操作，"),e("code",[a._v("each()")]),a._v(" 方法是最佳选择。")]),a._v(" "),e("h2",{attrs:{id:"range-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#range-迭代"}},[a._v("#")]),a._v(" Range 迭代")]),a._v(" "),e("p",[a._v("Groovy 提供了原生的 "),e("code",[a._v("Range")]),a._v(" 类型，可以直接迭代。使用两个点分隔的所有内容（比如 "),e("code",[a._v("1..10")]),a._v("）都是一个 "),e("code",[a._v("Range")]),a._v("。清单 14 展示了这个例子：")]),a._v(" "),e("h3",{attrs:{id:"清单-14-range-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-14-range-迭代"}},[a._v("#")]),a._v(" 清单 14. Range 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def range = 5..10\nrange.each{\n  println it\n}\n \n//output:\n5\n6\n7\n8\n9\n10\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("p",[e("code",[a._v("Range")]),a._v(" 不局限于简单的 "),e("code",[a._v("Integer")]),a._v("。考虑清单 15 在的代码，其中迭代 "),e("code",[a._v("Date")]),a._v(" 的 "),e("code",[a._v("Range")]),a._v("：")]),a._v(" "),e("h3",{attrs:{id:"清单-15-date-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-15-date-迭代"}},[a._v("#")]),a._v(" 清单 15. "),e("code",[a._v("Date")]),a._v(" 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def today = new Date()\ndef nextWeek = today + 7\n(today..nextWeek).each{\n  println it\n}\n \n//output:\nThu Mar 12 04:49:35 MDT 2009\nFri Mar 13 04:49:35 MDT 2009\nSat Mar 14 04:49:35 MDT 2009\nSun Mar 15 04:49:35 MDT 2009\nMon Mar 16 04:49:35 MDT 2009\nTue Mar 17 04:49:35 MDT 2009\nWed Mar 18 04:49:35 MDT 2009\nThu Mar 19 04:49:35 MDT 2009\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("p",[a._v("可以看到，"),e("code",[a._v("each()")]),a._v(" 准确地出现在您所期望的位置。Java 语言缺乏原生的 "),e("code",[a._v("Range")]),a._v(" 类型，但是提供了一个类似地概念，采取 "),e("code",[a._v("enum")]),a._v("的形式。毫不奇怪，在这里 "),e("code",[a._v("each()")]),a._v(" 仍然派得上用场。")]),a._v(" "),e("h2",{attrs:{id:"enumeration-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enumeration-类型"}},[a._v("#")]),a._v(" Enumeration 类型")]),a._v(" "),e("p",[a._v("Java "),e("code",[a._v("enum")]),a._v(" 是按照特定顺序保存的随意的值集合。清单 16 展示了 "),e("code",[a._v("each()")]),a._v(" 方法如何自然地配合 "),e("code",[a._v("enum")]),a._v("，就好象它在处理 "),e("code",[a._v("Range")]),a._v("操作符一样：")]),a._v(" "),e("h3",{attrs:{id:"清单-16-enum-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-16-enum-迭代"}},[a._v("#")]),a._v(" 清单 16. "),e("code",[a._v("enum")]),a._v(" 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("enum DAY{\n  MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\n    FRIDAY, SATURDAY, SUNDAY\n}\n \nDAY.each{\n  println it\n}\n \n(DAY.MONDAY..DAY.FRIDAY).each{\n  println it\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("p",[a._v("在 Groovy 中，有些情况下，"),e("code",[a._v("each()")]),a._v(" 这个名称远未能表达它的强大功能。在下面的例子中，将看到使用特定于所用上下文的方法对 "),e("code",[a._v("each()")]),a._v(" 方法进行修饰。Groovy "),e("code",[a._v("eachRow()")]),a._v(" 方法就是一个很好的例子。")]),a._v(" "),e("h2",{attrs:{id:"sql-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-迭代"}},[a._v("#")]),a._v(" SQL 迭代")]),a._v(" "),e("p",[a._v("在处理关系数据库表时，经常会说 “我需要针对表中的每一行执行操作”。比较一下前面的例子。您很可能会说 “我需要对列表中的每一种语言执行一些操作”。根据这个道理，"),e("code",[a._v("groovy.sql.Sql")]),a._v(" 对象提供了一个 "),e("code",[a._v("eachRow()")]),a._v(" 方法，如清单 17 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-17-resultset-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-17-resultset-迭代"}},[a._v("#")]),a._v(" 清单 17. "),e("code",[a._v("ResultSet")]),a._v(" 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('import groovy.sql.*\n \ndef sql = Sql.newInstance(\n   "jdbc:derby://localhost:1527/MyDbTest;create=true",\n   "username",\n   "password",\n   "org.apache.derby.jdbc.ClientDriver")\n \nprintln("grab a specific field")\nsql.eachRow("select name from languages"){ row ->\n    println row.name\n}\n \nprintln("grab all fields")\nsql.eachRow("select * from languages"){ row ->\n    println("Name: ${row.name}")\n    println("Version: ${row.version}")\n    println("URL: ${row.url}\\n")\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br")])]),e("p",[a._v("该脚本的第一行代码实例化了一个新的 "),e("code",[a._v("Sql")]),a._v(" 对象：设置 JDBC 连接字符串、用户名、密码和 JDBC 驱动器类。这时，可以调用 "),e("code",[a._v("eachRow()")]),a._v(" 方法，传递 SQL "),e("code",[a._v("select")]),a._v(" 语句作为一个方法参数。在闭包内部，可以引用列名（"),e("code",[a._v("name")]),a._v("、"),e("code",[a._v("version")]),a._v("、"),e("code",[a._v("url")]),a._v("），就好像实际存在 "),e("code",[a._v("getName()")]),a._v("、"),e("code",[a._v("getVersion()")]),a._v(" 和 "),e("code",[a._v("getUrl()")]),a._v(" 方法一样。")]),a._v(" "),e("p",[a._v("这显然要比 Java 语言中的等效方法更加清晰。在 Java 中，必须创建单独的 "),e("code",[a._v("DriverManager")]),a._v("、"),e("code",[a._v("Connection")]),a._v("、"),e("code",[a._v("Statement")]),a._v(" 和 "),e("code",[a._v("JDBCResultSet")]),a._v("，然后必须在嵌套的 "),e("code",[a._v("try")]),a._v("/"),e("code",[a._v("catch")]),a._v("/"),e("code",[a._v("finally")]),a._v(" 块中将它们全部清除。")]),a._v(" "),e("p",[a._v("对于 "),e("code",[a._v("Sql")]),a._v(" 对象，您会认为 "),e("code",[a._v("each()")]),a._v(" 或 "),e("code",[a._v("eachRow()")]),a._v(" 都是一个合理的方法名。但是在接下来的示例中，我想您会认为 "),e("code",[a._v("each()")]),a._v(" 这个名称并不能充分表达它的功能。")]),a._v(" "),e("h2",{attrs:{id:"文件迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件迭代"}},[a._v("#")]),a._v(" 文件迭代")]),a._v(" "),e("p",[a._v("我从未想过使用原始的 Java 代码逐行遍历 "),e("code",[a._v("java.io.File")]),a._v("。当我完成了所有的嵌套的 "),e("code",[a._v("BufferedReader")]),a._v(" 和 "),e("code",[a._v("FileReader")]),a._v(" 后（更别提每个流程末尾的所有异常处理），我已经忘记最初的目的是什么。")]),a._v(" "),e("p",[a._v("清单 18 展示了使用 Java 语言完成的整个过程：")]),a._v(" "),e("h3",{attrs:{id:"清单-18-java-文件迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-18-java-文件迭代"}},[a._v("#")]),a._v(" 清单 18. Java 文件迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('import java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n \npublic class WalkFile {\n   public static void main(String[] args) {\n      BufferedReader br = null;\n      try {\n         br = new BufferedReader(new FileReader("languages.txt"));\n         String line = null;\n         while((line = br.readLine()) != null) {\n            System.out.println("I know " + line);\n         }\n      }\n      catch(FileNotFoundException e) {\n         e.printStackTrace();\n      }\n      catch(IOException e) {\n         e.printStackTrace();\n      }\n      finally {\n         if(br != null) {\n            try {\n               br.close();\n            }\n            catch(IOException e) {\n               e.printStackTrace();\n            }\n         }\n      }\n   }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br")])]),e("p",[a._v("清单 19 展示了 Groovy 中的等效过程：")]),a._v(" "),e("h3",{attrs:{id:"清单-19-groovy-文件迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-19-groovy-文件迭代"}},[a._v("#")]),a._v(" 清单 19. Groovy 文件迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def f = new File("languages.txt")\nf.eachLine{language->\n  println "I know ${language}"\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("这正是 Groovy 的简洁性真正擅长的方面。现在，我希望您了解为什么我将 Groovy 称为 “"),e("a",{attrs:{href:"http://www.ibm.com/developerworks/cn/java/j-pg02179.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java 程序员的 DSL"),e("OutboundLink")],1),a._v("”。")]),a._v(" "),e("p",[a._v("注意，我在 Groovy 和 Java 语言中同时处理同一个 "),e("code",[a._v("java.io.File")]),a._v(" 类。如果该文件不存在，那么 Groovy 代码将抛出和 Java 代码相同的 "),e("code",[a._v("FileNotFoundException")]),a._v(" 异常。区别在于，Groovy 没有已检测的异常。在 "),e("code",[a._v("try")]),a._v("/"),e("code",[a._v("catch")]),a._v("/"),e("code",[a._v("finally")]),a._v(" 块中封装 "),e("code",[a._v("eachLine()")]),a._v(" 结构是我自己的爱好 — 而不是一项语言需求。对于一个简单的命令行脚本中，我欣赏 "),e("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-pg04149.html#listing19",target:"_blank",rel:"noopener noreferrer"}},[a._v("清单 19"),e("OutboundLink")],1),a._v(" 中的代码的简洁性。如果我在运行应用服务的同时执行相同的迭代，我不能对这些异常坐视不管。我将在与 Java 版本相同的 "),e("code",[a._v("try/catch")]),a._v(" 块中封装 "),e("code",[a._v("eachLine()")]),a._v(" 块。")]),a._v(" "),e("p",[e("code",[a._v("File")]),a._v(" 类对 "),e("code",[a._v("each()")]),a._v(" 方法进行了一些修改。其中之一就是 "),e("code",[a._v("splitEachLine(String separator, Closure closure)")]),a._v("。这意味着您不仅可以逐行遍历文件，同时还可以将它分为不同的标记。清单 20 展示了一个例子：")]),a._v(" "),e("h3",{attrs:{id:"清单-20-分解文件的每一行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-20-分解文件的每一行"}},[a._v("#")]),a._v(" 清单 20. 分解文件的每一行")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// languages.txt\n// notice the space between the language and the version\nJava 1.5\nGroovy 1.6\nJavaScript 1.x \n \n// splitTest.groovy\ndef f = new File("languages.txt")\nf.splitEachLine(" "){words->\n  words.each{ println it }\n}\n \n// output\nJava\n1.5\nGroovy\n1.6\nJavaScript\n1.x\n\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br")])]),e("p",[a._v("如果处理的是二进制文件，Groovy 还提供了一个 "),e("code",[a._v("eachByte()")]),a._v(" 方法。")]),a._v(" "),e("p",[a._v("当然，Java 语言中的 "),e("code",[a._v("File")]),a._v(" 并不总是一个文件 — 有时是一个目录。Groovy 还提供了一些 "),e("code",[a._v("each()")]),a._v(" 修改以处理子目录。")]),a._v(" "),e("h2",{attrs:{id:"目录迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录迭代"}},[a._v("#")]),a._v(" 目录迭代")]),a._v(" "),e("p",[a._v("使用 Groovy 代替 shell 脚本（或批处理脚本）非常容易，因为您能够方便地访问文件系统。要获得当前目录的目录列表，参见清单 21：")]),a._v(" "),e("h3",{attrs:{id:"清单-21-目录迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-21-目录迭代"}},[a._v("#")]),a._v(" 清单 21. 目录迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def dir = new File(".")\ndir.eachFile{file->\n  println file\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[e("code",[a._v("eachFile()")]),a._v(" 方法同时返回了文件和子目录。使用 Java 语言的 "),e("code",[a._v("isFile()")]),a._v(" 和 "),e("code",[a._v("isDirectory()")]),a._v(" 方法，可以完成更复杂的事情。清单 22 展示了一个例子：")]),a._v(" "),e("h3",{attrs:{id:"清单-22-分离文件和目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-22-分离文件和目录"}},[a._v("#")]),a._v(" 清单 22. 分离文件和目录")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def dir = new File(".")\ndir.eachFile{file->\n  if(file.isFile()){\n    println "FILE: ${file}"    \n  }else if(file.isDirectory()){\n    println "DIR:  ${file}"\n  }else{\n    println "Uh, I\'m not sure what it is..."\n  }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])]),e("p",[a._v("由于两种 Java 方法都返回 "),e("code",[a._v("boolean")]),a._v(" 值，可以在代码中添加一个 Java 三元操作符。清单 23 展示了一个例子：")]),a._v(" "),e("h3",{attrs:{id:"清单-23-三元操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-23-三元操作符"}},[a._v("#")]),a._v(" 清单 23. 三元操作符")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def dir = new File(".")\ndir.eachFile{file->\n  println file.isDirectory() ? "DIR:  ${file}" : "FILE: ${file}"\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("如果只对目录有兴趣，那么可以使用 "),e("code",[a._v("eachDir()")]),a._v(" 而不是 "),e("code",[a._v("eachFile()")]),a._v("。还提供了 "),e("code",[a._v("eachDirMatch()")]),a._v(" 和 "),e("code",[a._v("eachDirRecurse()")]),a._v(" 方法。")]),a._v(" "),e("p",[a._v("可以看到，对 "),e("code",[a._v("File")]),a._v(" 仅使用 "),e("code",[a._v("each()")]),a._v(" 方法并不能提供足够的含义。典型 "),e("code",[a._v("each()")]),a._v(" 方法的语义保存在 "),e("code",[a._v("File")]),a._v(" 中，但是方法名更具有描述性，从而提供更多有关这个高级功能的信息。")]),a._v(" "),e("h2",{attrs:{id:"url-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-迭代"}},[a._v("#")]),a._v(" URL 迭代")]),a._v(" "),e("p",[a._v("理解了如何遍历 "),e("code",[a._v("File")]),a._v(" 后，可以使用相同的原则遍历 HTTP 请求的响应。Groovy 为 "),e("code",[a._v("java.net.URL")]),a._v(" 提供了一个方便的（和熟悉的）"),e("code",[a._v("eachLine()")]),a._v(" 方法。")]),a._v(" "),e("p",[a._v("例如，清单 24 将逐行遍历 ibm.com 主页的 HTML：")]),a._v(" "),e("h3",{attrs:{id:"清单-24-url-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-24-url-迭代"}},[a._v("#")]),a._v(" 清单 24. URL 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def url = new URL("http://www.ibm.com")\nurl.eachLine{line->\n  println line\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("当然，如果这就是您的目的的话，Groovy 提供了一个只包含一行代码的解决办法，这主要归功于 "),e("code",[a._v("toURL()")]),a._v(" 方法，它被添加到所有 "),e("code",[a._v("Strings")]),a._v("："),e("code",[a._v('"http://www.ibm.com".toURL().eachLine{ println it }')]),a._v("。")]),a._v(" "),e("p",[a._v("但是，如果希望对 HTTP 响应执行一些更有用的操作，该怎么办呢？具体来讲，如果发出的请求指向一个 RESTful Web 服务，而该服务包含您要解析的 XML，该怎么做呢？"),e("code",[a._v("each()")]),a._v(" 方法将在这种情况下提供帮助。")]),a._v(" "),e("h2",{attrs:{id:"xml-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xml-迭代"}},[a._v("#")]),a._v(" XML 迭代")]),a._v(" "),e("p",[a._v("您已经了解了如何对文件和 URL 使用 "),e("code",[a._v("eachLine()")]),a._v(" 方法。XML 给出了一个稍微有些不同的问题 — 与逐行遍历 XML 文档相比，您可能更希望对逐个元素进行遍历。")]),a._v(" "),e("p",[a._v("例如，假设您的语言列表存储在名为 languages.xml 的文件中，如清单 25 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-25-languages-xml-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-25-languages-xml-文件"}},[a._v("#")]),a._v(" 清单 25. languages.xml 文件")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<langs>\n  <language>Java</language>\n  <language>Groovy</language>\n  <language>JavaScript</language>\n</langs>\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("p",[a._v("Groovy 提供了一个 "),e("code",[a._v("each()")]),a._v(" 方法，但是需要做一些修改。如果使用名为 "),e("code",[a._v("XmlSlurper")]),a._v(" 的原生 Groovy 类解析 XML，那么可以使用 "),e("code",[a._v("each()")]),a._v(" 遍历元素。参见清单 26 所示的例子：")]),a._v(" "),e("h3",{attrs:{id:"清单-26-xml-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-26-xml-迭代"}},[a._v("#")]),a._v(" 清单 26. XML 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def langs = new XmlSlurper().parse("languages.xml")\nlangs.language.each{\n  println it\n}\n \n//output\nJava\nGroovy\nJavaScript\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("p",[e("code",[a._v("langs.language.each")]),a._v(" 语句从名为 "),e("code",[a._v("<language>")]),a._v(" 的 "),e("code",[a._v("<langs>")]),a._v(" 提取所有元素。如果同时拥有 "),e("code",[a._v("<format>")]),a._v(" 和 "),e("code",[a._v("<server>")]),a._v(" 元素，它们将不会出现在 "),e("code",[a._v("each()")]),a._v(" 方法的输出中。")]),a._v(" "),e("p",[a._v("如果觉得这还不够的话，那么假设这个 XML 是通过一个 RESTful Web 服务的形式获得，而不是文件系统中的文件。使用一个 URL 替换文件的路径，其余代码仍然保持不变，如清单 27 所示：")]),a._v(" "),e("h3",{attrs:{id:"清单-27-web-服务调用的-xml-迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清单-27-web-服务调用的-xml-迭代"}},[a._v("#")]),a._v(" 清单 27. Web 服务调用的 XML 迭代")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def langs = new XmlSlurper().parse("http://somewhere.com/languages")\nlangs.language.each{\n  println it\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("这真是个好方法，"),e("code",[a._v("each()")]),a._v(" 方法在这里用得很好，不是吗？")]),a._v(" "),e("h2",{attrs:{id:"结束语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结束语"}},[a._v("#")]),a._v(" 结束语")]),a._v(" "),e("p",[a._v("在使用 "),e("code",[a._v("each()")]),a._v(" 方法的整个过程中，最妙的部分在于它只需要很少的工作就可以处理大量 Groovy 内容。解了 "),e("code",[a._v("each()")]),a._v(" 方法之后，Groovy 中的迭代就易如反掌了。正如 Raymond 所说，这正是关键所在。一旦了解了如何遍历 "),e("code",[a._v("List")]),a._v("，那么很快就会掌握如何遍历数组、"),e("code",[a._v("Map")]),a._v("、"),e("code",[a._v("String")]),a._v("、"),e("code",[a._v("Range")]),a._v("、"),e("code",[a._v("enum")]),a._v("、SQL "),e("code",[a._v("ResultSet")]),a._v("、"),e("code",[a._v("File")]),a._v("、目录和 "),e("code",[a._v("URL")]),a._v("，甚至是 XML 文档的元素。")]),a._v(" "),e("p",[a._v("本文的最后一个示例简单提到使用 "),e("code",[a._v("XmlSlurper")]),a._v(" 实现 XML 解析。在下一期文章中，我将继续讨论这个问题，并展示使用 Groovy 进行 XML 解析有多么简单！您将看到 "),e("code",[a._v("XmlParser")]),a._v(" 和 "),e("code",[a._v("XmlSlurper")]),a._v(" 的实际使用，并更好地了解 Groovy 为什么提供两个类似但又略有不同的类实现 XML 解析。到那时，希望您能发现 Groovy 的更多实际应用。")]),a._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),e("p",[a._v("https://www.ibm.com/developerworks/cn/java/j-pg04149.html")]),a._v(" "),e("h2",{attrs:{id:"留言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[a._v("#")]),a._v(" 留言")]),a._v(" "),e("p",[e("valine")],1)])}),[],!1,null,null,null);s.default=t.exports}}]);